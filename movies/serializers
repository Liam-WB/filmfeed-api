"""from rest_framework import serializers
from movies.models import Movies
from likes.models import Like


class MovieSerializer(serializers.ModelSerializer):
    added_by = serializers.ReadOnlyField(source='owner.username')
    is_admin = serializers.SerializerMethodField()
    posts_count = serializers.ReadOnlyField()
    like_id = serializers.SerializerMethodField()
    likes_count = serializers.ReadOnlyField()
    comments_count = serializers.ReadOnlyField()

    def validate_image(self, value):
        if value.size > 2 * 1024 * 1024:
            raise serializers.ValidationError('Image size larger than 2MB!')
        if value.image.height > 4096:
            raise serializers.ValidationError(
                'Image height larger than 4096px!'
            )
        if value.image.width > 4096:
            raise serializers.ValidationError(
                'Image width larger than 4096px!'
            )
        return value

    def get_is_admin(self, obj):
        request = self.context['request']
        return request.user == obj.added_by
    
    def get_like_id(self, obj):
        user = self.context['request'].user
        if user.is_authenticated:
            like = Like.objects.filter(
                added_by=user, post=obj
            ).first()
            return like.id if like else None
        return None

    class Meta:
        model = Movie
        fields = [
            'id', 'added_by', 'movie_id', 'profile_id',
            'genres', 'created_at', 'updated_at',
            'title', 'imdb', 'tmdb', 'movie_poster', 'likes_count',
            'comments_count', 'is_admin', 'posts_count', 'like_id',
        ]
"""